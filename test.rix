exp first: desc "gets the first element of a list" fn [list] [nth list 0]
exp second: desc "gets the second element of a list" fn [list] [nth list 1]
exp rest: desc "gets all of the list apart from the first element" fn [list] [second decons list]
exp reduce*: desc "recursivally applies 'fun' to 'prev' and the first element of 'list', calling reduce* again with the result of that evaluation as 'prev', and the remainder of the list as 'list'" fn [prev list fun]
	 [
		if (> len list 0)
		[
			reduce* (fun prev first list) # the new prev is the result of calling the input function on the original prev and the first element of the list
			(rest list) # the new list is the rest of the list
			;fun # the ; syntax gets the value of something from the current namespace, but doesn't evaluate it afterwards. this allows for functions to be gotten from the namespace without being called
		]
		[prev] # return the final result
	 ]
exp reduce: desc "applies the binary operation in 'fun' to elements of 'list', first applying it to the first two elements, then applying the result of that to the next element, and so on"
    	 fn [list fun] [reduce* (first list) (rest list) ;fun]
