# memoization
exp memo-hash: {};
exp memoize: 
    desc "creates a memoized function with params and a body. memoized functions save their results in a hashtable to be looked up if the function is called with the same params again" 
    mac [params body]
    [
        let '{key ,(quot '[@(map unlock params fn [x] [uquot $x]) ,(unlock body)])}
        [
            '[
                cloex [memo-hash] consfn ,(unlock params)
                [
                    if (at ,$key memo-hash) 
                    [
                        at ,$key memo-hash
                    ] 
                    [
                        let ,(quot '{res ,(uquot '(let {} ,(unlock body)))})
                        [
                            modf 'memo-hash (setat ,$key $res memo-hash)
                            $res
                        ]
                    ]
                ]
            ]
        ]
    ];





















































# consfn 
# [a b] 
# [
#     if (at [+ a b] memo-hash) 
#     [
#         let '{val ,(at '[,a ,b] at [+ a b] memo-hash)} 
#         [
#             if $val 
#             [$val] 
#             [
#                 let '{fres ,(evl fn [a b] [+ a b] a b)} 
#                 [
#                     modf 'memo-hash (setat [+ a b] (setat '[,a ,b] $fres (at [+ a b] memo-hash)) memo-hash)
#                     $fres
#                 ]
#             ]
#         ]
#     ] 
#     [
#         let '{fres ,(evl fn [a b] [+ a b] a b)}
#         [
#             modf 'memo-hash (setat [+ a b] '{,'[,a ,b] ,$fres})
#             $fres
#         ]
#     ]
# ]
