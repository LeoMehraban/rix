# memoization
exp memo-hash: {};
exp memoize: 
    mac [params body] 
    '[
        cloex [memo-hash] consfn ,(unlock params) 
        [
            if (prn at prn ,(unlock body) prn memo-hash) 
            [
                let ,(quot '{val ,(uquot '(at ,(quot map (unlock params) fn [param] [uquot $param]) at ,(unlock body) memo-hash))})         
                [
                    if $val
                    [
                        $val
                    ]
                    [
                        let ,(quot '{fres ,(uquot '(,(consfn (unlock params) (unlock body)) @(unlock params)))})
                        [
                            modf 'memo-hash (setat ,(unlock body) (setat ,(quot map (unlock params) fn [param] [uquot $param]) $fres (at ,(unlock body) memo-hash)) memo-hash)
                            $fres
                        ]
                    ]
                ]
            ] 
            [
                let ,(quot '{fres ,(uquot '(,(consfn (unlock params) (unlock body)) @(unlock params)))})
                [
                    modf 'memo-hash (prn setat ,(unlock body) ,(quot '{,(uquot quot map (unlock params) fn [param] [uquot $param]) ,,$fres}) memo-hash)
                    prn "in this section"
                    $fres
                ]

            ]
        ]
    ];

# consfn 
# [a b] 
# [
#     if (at [+ a b] memo-hash) 
#     [
#         let '{val ,(at '[,a ,b] at [+ a b] memo-hash)} 
#         [
#             if $val 
#             [$val] 
#             [
#                 let '{fres ,(evl fn [a b] [+ a b] a b)} 
#                 [
#                     modf 'memo-hash (setat [+ a b] (setat '[,a ,b] $fres (at [+ a b] memo-hash)) memo-hash)
#                     $fres
#                 ]
#             ]
#         ]
#     ] 
#     [
#         let '{fres ,(evl fn [a b] [+ a b] a b)}
#         [
#             modf 'memo-hash (setat [+ a b] '{,'[,a ,b] ,$fres})
#             $fres
#         ]
#     ]
# ]
